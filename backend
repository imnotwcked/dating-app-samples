backend
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const dotenv = require('dotenv');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const http = require('http');
const { Server } = require('socket.io');
const nodemailer = require('nodemailer');
const admin = require('firebase-admin');
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
const i18n = require('i18n');
const path = require('path');
const moment = require('moment');

dotenv.config();
const app = express();
const server = http.createServer(app);
const io = new Server(server, {
    cors: {
        origin: '*',
        methods: ['GET', 'POST']
    }
});

app.use(express.json());
app.use(cors());
app.use(express.static(path.join(__dirname, 'public')));

// Configure multi-language support
i18n.configure({
    locales: ['en', 'es', 'fr', 'de', 'ko', 'zh'],
    directory: __dirname + '/locales',
    defaultLocale: 'en',
    cookie: 'lang'
});
app.use(i18n.init);

mongoose.connect(process.env.MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true
}).then(() => console.log('MongoDB Connected'))
  .catch(err => console.log(err));

admin.initializeApp({
    credential: admin.credential.cert(JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT))
});

const userSchema = new mongoose.Schema({
    name: String,
    age: Number,
    image: String,
    interests: [String],
    location: {
        type: { type: String, enum: ['Point'], default: 'Point' },
        coordinates: { type: [Number], required: true }
    },
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    likedUsers: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],
    matches: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],
    fcmToken: { type: String },
    premium: { type: Boolean, default: false },
    reports: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],
    isBanned: { type: Boolean, default: false },
    isAdmin: { type: Boolean, default: false },
    language: { type: String, default: 'en' }
});

const User = mongoose.model('User', userSchema);

const analyticsSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    loginCount: { type: Number, default: 0 },
    matchesMade: { type: Number, default: 0 },
    messagesSent: { type: Number, default: 0 },
    lastLogin: { type: Date, default: Date.now }
});

const Analytics = mongoose.model('Analytics', analyticsSchema);

// Advanced real-time analytics
app.get('/admin/analytics', async (req, res) => {
    try {
        const { startDate, endDate } = req.query;
        let filter = {};

        if (startDate && endDate) {
            filter.lastLogin = { $gte: new Date(startDate), $lte: new Date(endDate) };
        }

        const analyticsData = await Analytics.find(filter).populate('userId', 'name email');
        res.json(analyticsData);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Real-time monitoring API
io.on('connection', (socket) => {
    console.log('Admin connected for real-time monitoring');
    
    setInterval(async () => {
        const activeUsers = await Analytics.countDocuments({ lastLogin: { $gte: moment().subtract(5, 'minutes').toDate() } });
        socket.emit('realTimeAnalytics', { activeUsers });
    }, 5000);

    socket.on('disconnect', () => {
        console.log('Admin disconnected from real-time monitoring');
    });
});

// Admin control: View, edit, delete users, manage roles
app.get('/admin/users', async (req, res) => {
    try {
        const users = await User.find({}, 'name email premium isBanned isAdmin');
        res.json(users);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

app.post('/admin/edit-user', async (req, res) => {
    try {
        const { adminId, userId, updates } = req.body;
        const adminUser = await User.findById(adminId);
        if (!adminUser || !adminUser.isAdmin) {
            return res.status(403).json({ message: 'Unauthorized' });
        }
        
        const user = await User.findByIdAndUpdate(userId, updates, { new: true });
        res.json({ message: 'User updated successfully', user });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

app.delete('/admin/delete-user/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        await User.findByIdAndDelete(userId);
        res.json({ message: 'User deleted successfully' });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

server.listen(5000, () => console.log('Server running on port 5000'));
